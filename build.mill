package build
import mill._, scalalib._

object Version {
  val zio = "2.1.17"
}

object `package` extends RootModule with SbtModule {
  def scalaVersion = "2.13.16"

  // You can have arbitrary numbers of third-party dependencies
  def ivyDeps = Agg(
      ivy"ch.qos.logback:logback-classic:1.5.17",
      ivy"com.github.pureconfig::pureconfig:0.17.8",
      ivy"com.h2database:h2:2.3.232",
      ivy"dev.zio::zio:${Version.zio}",
      ivy"dev.zio::zio-cli:0.7.1",
      ivy"dev.zio::zio-http:3.1.0",
      ivy"dev.zio::zio-json:0.7.36",
      ivy"dev.zio::zio-logging-slf4j2:2.5.0",
      ivy"dev.zio::zio-prelude:1.0.0-RC39",
      ivy"dev.zio::zio-profiling:0.3.2",
      ivy"io.getquill::quill-jdbc-zio:4.8.5",
  )

  object test extends SbtTests with TestModule.ZioTest {
    def testSandboxWorkingDir = false
    def ivyDeps = Agg(
      ivy"org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:1.0-alpha-14",
      ivy"dev.zio::zio-test:${Version.zio}",
      ivy"dev.zio::zio-test-sbt:${Version.zio}",
      ivy"dev.zio::zio-test-magnolia:${Version.zio}")
  }


//  // Choose a main class to use for `.run` if there are multiple present
//  def mainClass: T[Option[String]] = Some("foo.Foo2")
//
//  // Add (or replace) source folders for the module to use
//  def sources = Task.Sources {
//    super.sources() ++ Seq(PathRef(millSourcePath / "custom-src"))
//  }
//
//  // Add (or replace) resource folders for the module to use
//  def resources = Task.Sources {
//    super.resources() ++ Seq(PathRef(millSourcePath / "custom-resources"))
//  }
//
//  // Generate sources at build time
//  def generatedSources: T[Seq[PathRef]] = Task {
//    for (name <- Seq("A", "B", "C")) os.write(
//      Task.dest / s"Foo$name.scala",
//      s"""
//package foo
//object Foo$name {
//  val value = "hello $name"
//}
//      """.stripMargin
//    )
//
//    Seq(PathRef(Task.dest))
//  }
//
//  // Pass additional JVM flags when `.run` is called or in the executable
//  // generated by `.assembly`
//  def forkArgs: T[Seq[String]] = Seq("-Dmy.custom.property=my-prop-value")
//
//  // Pass additional environmental variables when `.run` is called. Note that
//  // this does not apply to running externally via `.assembly
//  def forkEnv: T[Map[String, String]] = Map("MY_CUSTOM_ENV" -> "my-env-value")
//
//  // Additional Scala compiler options, e.g. to turn warnings into errors
//  def scalacOptions: T[Seq[String]] = Seq("-deprecation", "-Xfatal-warnings")
}